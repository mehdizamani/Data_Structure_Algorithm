Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.








// maximum_subarray.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include "pch.h"
#include <iostream>
#include <vector>

using namespace std;

int max_subarray(vector<int> a)
{
	if (a.size() == 0)
		return 0;
	int max = a[0];
	int sumCnt = a[0];
	for (int i = 1; i < a.size(); i++)
	{
		if (max < 0)
		{
			if (max < a[i])
			{
				max = a[i];
				sumCnt = max;
			}
		}
		else
		{
			sumCnt += a[i];
			if (sumCnt > max)
				max = sumCnt;
			else if (sumCnt < 0)
				sumCnt = 0;
		}
		//max  = sumCnt > max ? sumCnt : max;
	}
	return max;
}
int main()
{
	vector<int> a = { -2,1,-3,4,-1,2,1,-5,4 };//{31,-41,59,26,-53,58,97,-93,-23,84 };//{23,-2,54,6,-444,67,53,2,7,-1 };
//	vector<int> a = {};
	cout << max_subarray(a);
}


// MY SECOND APPROACH!!!!! GOOD!!

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int maxmin = INT_MIN; // only useful when all elements are negative
        int maxx = INT_MIN;
        int tempSum = 0 ;
        for(int i = 0; i < nums.size(); i++)
        {
            if (nums[i] + tempSum >= 0)
                tempSum = nums[i] + tempSum ;
            else 
                tempSum = 0;
            maxx = max(maxx , tempSum);
            
            if (nums[i] <= 0)// only useful when all elements are negative
                maxmin = max(maxmin, nums[i]);
        }
        return maxx > 0 ? maxx : maxmin; // in case all elements in the input are negarive or zero, the maxx is zero, and at that time, maxmin is the output
    }
};







/* LEET CODE    easier answer!!!!



	int sum = 0, smax = INT_MIN;
	for (int num : a) {
		sum += num;
		smax = max(smax, sum);
		if (sum < 0) {
			sum = 0;
		}
	}



*/
