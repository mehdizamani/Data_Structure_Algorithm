Given an array A of non-negative integers, return an array consisting of all the even elements of A, 
followed by all the odd elements of A.

You may return any answer array that satisfies this condition.

 

Example 1:

Input: [3,1,2,4]
Output: [2,4,3,1]
The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.





class Solution {
public:
    vector<int> sortArrayByParity(vector<int>& A) {
        // BAD both in terms of space and time, 36 ms!!
        /*
        vector<int> out;
        deque<int> q;
        for(auto i: A)
            if (i&1)
                q.push_back(i);
            else
                 q.push_front(i);
        out.insert(out.begin(),q.begin(),q.end());
        return q;
        */
        
        ////////////////
        /* good space awfule time 100ms!!!
        int temp = 0;
        int cnt = 0;
        int j = 0;
        while(j < A.size())
        {
            if (A[cnt] & 1)
            {
                temp = A[cnt];
                A.erase(A.begin() + cnt);
                A.push_back(temp);
                j++;
                continue;
            }
            cnt++;
            j++;
        }
        return A;
        */
    
        
        
        // 28 ms and average space   77% time, 37% space
        vector<int> out; 
        for(auto i: A)
            if (! (i & 1) )
                out.push_back(i);
        for(auto i: A)
            if ( i & 1)
                out.push_back(i);
        return out;
            
         ////////////////////////////
        // LEETCODE OPTIML space % 100 but poor speed 40ms 16%
        /*
        int i = 0, j = A.size() - 1;
        int temp = 0 ;
        while(i < j){
            if(A[i] % 2 > A[j] % 2) // if i is odd and j is even
            {
                temp = A[i];
                A[i] = A[j];
                A[j] = temp;
            }
            if (! (A[i] & 1) ) i++; // even  //  tricky! use paranthesis if you wana use ! 
            if ( A[j] & 1 ) j--; // odd
        }
        return A;
        */
    }
}; 
