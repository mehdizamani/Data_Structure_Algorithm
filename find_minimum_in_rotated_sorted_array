/*
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

Find the minimum element.

You may assume no duplicate exists in the array.
*/
// minumun_in_rotated_sorted_array.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include "pch.h"
#include <vector>
#include <iostream>
using namespace std;

class Solution {
public:
	int findMinRec(const vector<int> & vec, int l, int r)
	{
		int m = (r + l) / 2;
		if (r > l)
		{
			if (vec[l] <= vec[m] && vec[m] <= vec[r])
				return vec[l];
			else if (vec[l] >= vec[m] && vec[m] <= vec[r] && vec[l] >= vec[r])
			{
				r = m;
				return findMinRec(vec, l, r);
			}
			else if (vec[l] <= vec[m] && vec[m] >= vec[r] && vec[l] >= vec[r])
			{
				l = m + 1;
				return findMinRec(vec, l, r);
			}
		}
		else
		{
			return vec[l];
		}
	}

	int findMin(vector<int>& nums) {
		int l = 0;
		int r = nums.size()-1;
		return findMinRec(nums, l, r);
	}
};


int main()
{
	Solution sol;
	vector<int> tes = { -1,3,5,7};
	cout<<sol.findMin(tes);
}


/* LEETCODE
class Solution {
    public int findMin(int[] nums) {
        if(nums[0]<nums[nums.length-1]){
            return nums[0];
        }
        int l = 0;
        int r = nums.length-1;
        while(r>l){
            int mid = (l+r)/2;
            if(nums[mid]>=nums[0]){
                l = mid+1;
            }else{
                r = mid;
            }
        }
        return nums[l];
    }
}
*/
