// longest_substring_without_repeated_char.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include "pch.h"
#include <iostream>
#include <unordered_map>
#include <algorithm>
#include <string>
using namespace std;

int longestSubstring(string s)
{
	int l = 0, r = 0, len = 0;
	int lfinal = 0, rfinal = 0;
	unordered_map<char, int> window;
	while (r < s.size()) {
		if (window.find(s[r]) != window.end())
			l = max(l, window[s[r]] + 1);      // very thricky!! no need to delete the previously added keys to the map. just need to update l    
		window[s[r]] = r;
		//len = max(len, r - l + 1);
		if (len <= r - l + 1)
		{
			rfinal = r;
			lfinal = l;
			len = r - l + 1;
		}
		r++;
	}
	cout << rfinal << " " << lfinal << endl;
	return len;
	/*
	unordered_map <char, int> map;
	int i = 0;
	int l = 0, r = 0, len = 0;
	while (i < s.size())
	{
		if (map.find(s[i]) == map.end())
		{
			map[s[i]] = i;
			r++;
			len = max(len, r - l);
			//cout << len<<endl;
		}
		else
		{
			for (int k = l; k < r; k++)
				cout << s[k];
			unordered_map<char, int>::iterator it = map.begin();
			int j = -1;
			cout << " isue in "<< s[i] << endl;
			while (it!= map.find(s[i]))
			{
				it=map.erase(it);
				j++;
			}
			//map[s[i]] = i;
			l += j;
			r = i;
			cout << "l" << l << endl;
			cout << "r" << r << endl;
		}
		i++;
	}
	for (int k = l; k < r; k++)
		cout << s[k];

	return len;*/
}

int main()
{
    string s="bqwwert"; 
	cout << longestSubstring(s);
}
