/*
Let's call an array A a mountain if the following properties hold:

A.length >= 3
There exists some 0 < i < A.length - 1 such that A[0] < A[1] < ... A[i-1] < A[i] > A[i+1] > ... > A[A.length - 1]
Given an array that is definitely a mountain, return any i such that A[0] < A[1] < ... A[i-1] < A[i] > A[i+1] > ... > A[A.length - 1].
*/

class Solution {
public:
    int peakIndexInMountainArray(vector<int>& A) {
        // O(N)
        /*
        int i=0;
        while (i<A.size()-1 && A[i]<A[i+1])
            i++;
        return i;
        */
        // O(log(N))
        int l=0;
        int r=A.size();
        int m=0;
        while(l<r)
        {
            m=(r+l)/2;
            if(A[m]<A[m+1])
                l=m+1;
            else
                r=m;
        }
        return l;
    }
};
