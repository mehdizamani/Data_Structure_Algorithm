

// MY IMPELENTATION
class Solution {
public:
    bool isItOpening(char c)
    {
        if (c == '(' || c == '{' || c == '[' )
            return true;
        return false;
    }
    
    bool isItEnding(char c)
    {
        if (c == '}' || c == ')' || c == ']' )
            return true;
        return false;
    }
    bool isValid(string s) {
        stack<char> sc;
        if(isItEnding(s[0]))
            return false;
        for(int i = 0; i < s.size(); i++)
        {
            if (isItOpening(s[i]))
                sc.push(s[i]);
            else if (!sc.empty())
            {
                switch (s[i])
                {
                    case ')':
                        if(sc.top() == '(')
                            sc.pop();
                        else 
                            return false;
                        break;
                    case '}':
                        if(sc.top() == '{')
                            sc.pop();
                        else 
                            return false;
                        break;
                    case ']':
                        if(sc.top() == '[')
                            sc.pop();
                        else 
                            return false;
                        break;
                    default:
                        return false;
                        break;
                }
            }
            else
                return false;
            
        }
        
        if(!sc.empty())
            return false;
        return true;
    }
};

//////////////////////////////////////////////////////////






// LEETCODE IMPLEMENTATION
#include "pch.h"
#include <iostream>
#include <stack>
#include <string>
using namespace std;


bool balanced(string  ch)
{
	stack<char> st;
	char x;
	for (int i = 0; i < ch.length(); i++)
	{
		if ((ch[i] == '{') || (ch[i] == '(') || (ch[i] == '['))
		{
			st.push(ch[i]);
			continue;
		}
		if (ch.empty())
			return false;

		switch (ch[i]) {
		case '}':
			x = st.top();
			st.pop();
			//cout << "}" <<x << endl;
			if ((x == '(') || (x == '['))
				return false;
			break;
		case ']':
			x = st.top();
			st.pop();
		//	cout << "]" << x << endl;

			if ((x == '{') || ( x == '('))
				return false;
			break;
		case ')':
			x = st.top();
			st.pop();
		//	cout << ")" << x << endl;
			if ((x == '{') || (x == '['))
				return false;
			break;
		}
	}
	return st.empty();
}

int main()
{
	string s = "[]{()}";
	//cout << sizeof(s) << endl;
	//char str_converted[sizeof(s)];
	//strcpy_s(str_converted, s.c_str());
	
	if (true == balanced(s))
		cout << "BALANCED" << endl;
	else
		cout << "NOT BALANCED" << endl;
}
