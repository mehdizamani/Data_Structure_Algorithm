Given an array of integers A sorted in non-decreasing order, 
return an array of the squares of each number, also in sorted non-decreasing order.

 

Example 1:

Input: [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Example 2:

Input: [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 

Note:

1 <= A.length <= 10000
-10000 <= A[i] <= 10000
A is sorted in non-decreasing order.



class Solution {
public:
    vector<int> sortedSquares(vector<int>& A) {
        int n=A.size();
        vector<int> ret;
        for (int i=0,j=n-1;i<=j;){
            int sqi=A[i]*A[i],sqj=A[j]*A[j];
            if (sqi<sqj){
                ret.push_back(sqj);
                --j;
            }
            else if (sqj<sqi){
                ret.push_back(sqi);
                ++i;
            }
            else{
                ret.push_back(sqi);
                if (i!=j) ret.push_back(sqj);
                ++i,--j;
            }
        }
        reverse(ret.begin(),ret.end());
        return ret;
    }
};
