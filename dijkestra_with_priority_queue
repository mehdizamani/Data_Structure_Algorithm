


// test3.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include "pch.h"
#include <iostream>
#include <string>         // std::string
#include <locale> 
#include <algorithm>
#include <list>
#include <queue>
//#include <bits/stdc++.h>

using namespace std;
class Graph {
private:
	int V;
	list<pair<int, int>> *adj;
public:
	Graph(int V);
	void add(int a,int b, int w);
	void dijkstra_priority_q(int src);
};
Graph::Graph(int V) {
	this->V = V;
	adj = new list<pair<int, int>>[V];
};
void Graph::add(int a, int b, int w) {
	adj[a].push_back(make_pair(b, w));
	adj[b].push_back(make_pair(a, w));
};
void Graph::dijkstra_priority_q(int src) {
	priority_queue<pair<int,int>, vector<pair<int, int>>, greater<pair<int, int>> > pq;
	vector<int> dist(V, INT_MAX);
	dist[src] = 0;
	pq.push(make_pair(0, src));
	while (!pq.empty())
	{
		auto i = pq.top();
		pq.pop();
		int w = (i).first;
		int u = (i).second;

		for (auto j = adj[u].begin(); j != adj[u].end(); j++)
			if (dist[j->first] > w + j->second)
			{
				dist[j->first] = w + j->second;
				pq.push(make_pair(dist[j->first],j->first));
			}
	}
	cout << dist[V - 1];
}
int main()
{
	Graph g(5);
	g.add(0, 1, 2);
	g.add(0, 2, 3);
	g.add(1, 3, 1);
	g.add(3, 4, 1);
	g.add(1, 4, 5);
	g.add(2, 3, 4);
	g.dijkstra_priority_q(0);
}
