You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Note: Given n will be a positive integer.

Example 1:

Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step



class Solution {
public:
    int climbStairs(int n) {
        // APPROACH 1
        // Recursive . but time computation is BAD! THERE IS A TRICKY SOLTION FOR IT
        /*
        if(n<=0)
            return 0;
        if(n==1)
            return 1;
        if(n==2)
            return 2;
        if(n==3)
            return 3;
        //if( n & 1 ) // odd
        return climbStairs(n-1) + climbStairs(n-2); 
        */
        // APPROACH 2 Either carry a 
        int reserve[n+1] = {0};
        if(n<=0)
            return 0;
        if(n==1)
            return 1;
        if(n==2)
            return 2;
        if(n==3)
            return 3;
        reserve[1] = 1;
        reserve[2] = 2;
        for ( int i = 3 ; i <=n ; i++)
            reserve[i] =  reserve[i - 1] + reserve[i - 2];
        return reserve[n]; 
    }
};
