// closet_value_in_BST.cpp : This file contains the 'main' function. Program execution begins and ends there.
//
// breadth_first_travers_in_binary_tree.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include "pch.h"
#include <iostream>
#include <queue>
using namespace std;

struct BstNode {
	int value;
	BstNode * right;
	BstNode * left;
};

BstNode * GetANode(int value)
{
	BstNode * temp = new BstNode();
	temp->value = value;
	temp->left = temp->right = NULL;
	return temp;
}

BstNode * insert(BstNode * root, int val)
{
	if (root == NULL)
		root = GetANode(val);
	else if (val <= root->value)
		root->left = insert(root->left, val);
	else if (val > root->value)
		root->right = insert(root->right, val);
	return root;
}

bool search(BstNode * root, int val)
{
	if (root == NULL)
		return false;
	else if (root->value == val)
		return true;
	else if (val <= root->value)
		return search(root->left, val);
	else
		return search(root->right, val);
}

void breadth_travers(BstNode * root)
{
	queue<BstNode*> q;
	if (root != NULL)
		q.push(root);
	while (!q.empty())
	{
		std::cout << q.front()->value << " ";
		if (q.front()->left != NULL)
			q.push(q.front()->left);
		if (q.front()->right != NULL)
			q.push(q.front()->right);
		q.pop();
	}
}

int closestValue(BstNode * root, int target,int currentClosestValue)
{
	if (abs(root->value - target) < abs(target - currentClosestValue))
		currentClosestValue = root->value;
	if ((0 < target - root->value) && (root->right != NULL))
		return closestValue(root->right, target, currentClosestValue);
	if ((0 > target - root->value) && (root->left != NULL))
		return closestValue(root->left, target, currentClosestValue);
	else
		return currentClosestValue;
}
int findClosestValue(BstNode * root,int value)
{
	return closestValue(root, value,INT_MAX);
}

int main()
{
	BstNode * temp = NULL;
	temp = insert(temp, 10);
	temp = insert(temp, 8);
	temp = insert(temp, 5);

	temp = insert(temp, 15);
	temp = insert(temp, 14);
	temp = insert(temp, 16);

	temp = insert(temp, 3);
	//temp = insert(temp, 2);
	//temp = insert(temp, 1);
	//cout << (temp->left)->value;

	//temp = insert(temp, 4);
	//temp = insert(temp, 5);
	//breadth_travers(temp);
	cout<<findClosestValue(temp, 12);
}
