// merge_two_sorted_list.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include "pch.h"
#include <iostream>




using namespace std;

struct Node {
	int value;
	Node * next;
};

void insert_at_beginning(Node ** head, int x)
{
	// **** insert at the begining
	
	Node * temp = new Node; //  or this one  ---->  (Node *)malloc(sizeof(Node));
	temp->value = x;
	temp->next = *head;
	*head = temp;
}

void insert_at_end(Node ** head, int x)
{
	// **** insert at the end
	
	if (*head == NULL)
		insert_at_beginning(head, x);
	else
	{
		Node * tempHead = *head;
		Node * temp = new Node;
		temp->value = x;
		temp->next = NULL;
		while ((tempHead)->next != NULL)
			tempHead = (tempHead)->next;
		(tempHead)->next = temp;
	}
}
void print(Node * beginingNode)
{
	cout << "List is" << endl;
	while (beginingNode != NULL)
	{
		cout << beginingNode->value << endl;
		beginingNode = beginingNode->next;
	}
}

Node * mergeTwoLists(Node *l1, Node *l2)
{
	Node * temp = NULL;
	if (l1 == NULL && l2 == NULL)
		return NULL;
	else if (l1 == NULL && l2 != NULL)
		return l2;
	else if (l1 != NULL && l2 == NULL)
		return l1;
	else
	{
		int l1cnt = 0;
		int l2cnt = 0;
		while (l1 != NULL && l2 != NULL)
		{
			if (l1->value < l2->value)
			{
				insert_at_end(&temp, l1->value);
				l1 = l1->next;
			}
			else
			{
				insert_at_end(&temp, l2->value);
				l2 = l2->next;
			}
			if (l1 == NULL)
				l1cnt = 1;
			if (l2 == NULL)
				l2cnt = 1;
		}
		if (l1cnt == 1 && l2cnt != 1 )
		{
			while (l2 != NULL)
			{
				insert_at_end(&temp, l2->value);
				l2 = l2->next;
			}
		}

		if (l2cnt == 1 && l1cnt != 1)
		{
			while (l1 != NULL)
			{
				insert_at_end(&temp, l1->value);
				l1 = l1->next;
			}
		}
	}
	return temp;

}
int main()
{
	Node * l1 = NULL;
	insert_at_beginning(&l1, 6);
	insert_at_beginning(&l1, 3);
	insert_at_beginning(&l1, 1);
	
	Node * l2 = NULL;
	insert_at_beginning(&l2, 26);
	insert_at_beginning(&l2, 13);
	insert_at_beginning(&l2, 1);
	Node * l3=mergeTwoLists(l1, l2);
	print(l3);

}
