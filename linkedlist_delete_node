
#include "pch.h"
#include <iostream>
using namespace std;

struct Node {
	int value;
	Node * next;
};

void insert(Node ** head, int x)
{
	Node * temp = new Node; //  or this one  ---->  (Node *)malloc(sizeof(Node));
	temp->value = x;
	temp->next = *head;
	/*cout << "****" << endl;
	cout << temp << endl;
	cout << *head << endl;*/
	*head = temp;
}

void print(Node * beginingNode)
{
	cout << "List is" << endl;
	while (beginingNode != NULL)
	{
		cout << beginingNode->value << endl;
		beginingNode = beginingNode->next;
	}
}

void insert_middle(Node ** head, int val, int position) {
	//	Node * temp = (Node *)malloc(sizeof(Node));
	Node * head_backup = *head;
	Node * temp = new Node;
	temp->value = val;
	temp->next = NULL;
	if (position == 1)
		insert(head, val);
	else
	{
		int cnt = 2;
		while (cnt < position)
		{
			head_backup = head_backup->next;
			cnt++;
		}

		temp->next = head_backup->next;
		head_backup->next = temp;
	}
}

void delete_at_pos(Node **  node, int pos) {
	Node * head_backup = *node;
	Node * temp = NULL;
	Node * temp2 = NULL;
	if (pos == 1)
	{
		temp = head_backup->next;
		*node = temp;
	}
	else
	{
		int cnt = 1;
		while (cnt < pos - 1)
		{
			head_backup = head_backup->next;
			cnt++;
		}
		temp = head_backup->next;
		temp2 = temp->next;
		head_backup->next = temp2; 
	}

	//*********** 
	// MAKE SURE TO DELETE THE NODE 
	// Because the created node in the linked list was created in the heap.
}
//EASIER IMPLEMENTATION OF THE DELETE
void Delete(Node ** node, int a)
{
	Node * temp1 = *node;
	if (a == 1)
	{
		*node = temp1->next;
		delete(temp1);
		return;     // LEARN HOW TO USE RETURN EVEN FOR VOID!!!!!!!!!
	}
	for (int i = 0; i < a - 2; i++)
	{
		temp1 = temp1->next;
	}
	Node *temp2 = temp1->next;
	temp1->next = temp2->next;
	delete temp2; // In the case of calloc ----> use free. In case of new Node -----> use delete
}


int main()
{
	Node * head = NULL;

	int input[4];
	input[0] = 11;
	input[1] = 22;
	input[2] = 33;
	//Node * head;
	insert(&head, input[2]);
	insert(&head, input[1]);
	insert(&head, input[0]);
	input[3] = 44;
	insert_middle(&head, input[3], 4);
	//delete_at_pos(&head, 4);
	
	Delete(&head, 1);
	print(head);
}
