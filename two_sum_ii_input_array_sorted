// MY APPROACH
// 100% speed and 30% space
/*class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        vector<int> out;
        auto it = lower_bound(numbers.begin(), numbers.end(), target);
        int maxIndex = it - numbers.begin();
        unordered_map<int, int> m;
        if ((maxIndex == 0 || maxIndex == 1 ) && (numbers[0] + numbers[1] == target))
            return {1,2};
        else if ((maxIndex == 0 || maxIndex == 1 ) && (numbers[0] + numbers[1] != target))
            return {};
        for(int i = 0; i < maxIndex ; i++)
        {
            if( m.find(target - numbers[i]) != m.end() )
                return {m.find(target - numbers[i])->second + 1, i + 1};
            if(m.find(numbers[i]) == m.end())
                m[numbers[i]] = i; 
        }
        
        return out;
    }
};*/

// LEETCODE 
// 96% speed and 88% space
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        int low = 0, high = numbers.size() - 1;
        while (low < high) {
            int sum = numbers[low] + numbers[high];
            if (sum == target)
                return {low + 1, high + 1};
            else if (sum < target)
                ++low;
            else
                --high;
        }
        return {-1, -1};
    }
};
