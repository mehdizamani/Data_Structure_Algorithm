Abstract base classes in C++ can only be used as base classes. Thus, they are allowed to have virtual member functions without definitions.

A cache is a component that stores data so future requests for that data can be served faster. The data stored in a cache might be
the results of an earlier computation, or the duplicates of data stored elsewhere. A cache hit occurs when the requested data
can be found in a cache, while a cache miss occurs when it cannot. Cache hits are served by reading data from the cache which 
is faster than recomputing a result or reading from a slower data store. Thus, the more requests that can be served from the cache,
the faster the system performs.

One of the popular cache replacement policies is: "least recently used" (LRU). It discards the least recently used items first.

For example, if a cache with a capacity to store 5 keys has the following state(arranged from most recently used key to least recently used key) -

5 3 2 1 4
Now, If the next key comes as 1(which is a cache hit), then the cache state in the same order will be -

1 5 3 2 4
Now, If the next key comes as 6(which is a cache miss), then the cache state in the same order will be -

6 1 5 3 2






ruct Node{
   Node* next;
   Node* prev;
   int value;
   int key;
   Node(Node* p, Node* n, int k, int val):prev(p),next(n),key(k),value(val){};
   Node(int k, int val):prev(NULL),next(NULL),key(k),value(val){};
};

class Cache{
   
   protected: 
   map<int,Node*> mp; //map the key to the node in the linked list
   int cp;  //capacity
   Node* tail; // double linked list tail pointer
   Node* head; // double linked list head pointer
   virtual void set(int, int) = 0; //set function
   virtual int get(int) = 0; //get function

};


class LRUCache: public Cache
{
    public:
    LRUCache(int c) { cp = c; }
    
    void set(int k,int v)
    {
        Node *N;
        
        if(mp.empty()) //No nodes 
        {
            N = new Node(k,v);
            tail = head = N;
            mp[k] = N;
            
            return;
        }
        
        auto it = mp.find(k);
            
        if(it != mp.end()) //In hash table
        {
            it->second->value = v; // update value
            
            if(head == it->second) //head?
                return;
            
            it->second->prev->next = it->second->next;
            
            if(tail == it->second) //tail?
                tail = tail->prev;
            else                   //in between?
                it->second->next->prev = it->second->prev;
            
            it->second->next = head;
            it->second->prev = NULL;
            head->prev = it->second;
            head = it->second;
        }
        else               // No in hash table
        {
            N = new Node(head->prev,head,k,v); //new node
            head->prev = N; 
            head = N;
            mp[k] = N;
            
            if(mp.size() > cp) //capacity?
            {
                tail = tail->prev;
                mp.erase(tail->next->key);
                delete tail->next; 
                tail->next = NULL;
            }
            
        }

    }
    
    int get(int k)
    {
        auto it = mp.find(k);
        if(it != mp.end())
            return it->second->value;
        
        return -1;
    }
    
};
