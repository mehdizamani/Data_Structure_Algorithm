You have an array of logs.  Each log is a space delimited string of words.

For each log, the first word in each log is an alphanumeric identifier.  Then, either:

Each word after the identifier will consist only of lowercase letters, or;
Each word after the identifier will consist only of digits.
We will call these two varieties of logs letter-logs and digit-logs.  
It is guaranteed that each log has at least one word after its identifier.

Reorder the logs so that all of the letter-logs come before any digit-log. 
The letter-logs are ordered lexicographically ignoring identifier, with the identifier used in case of ties. 
The digit-logs should be put in their original order.

Return the final order of the logs.

 

Example 1:

Input: ["a1 9 2 3 1","g1 act car","zo4 4 7","ab1 off key dog","a8 act zoo"]
Output: ["g1 act car","a8 act zoo","ab1 off key dog","a1 9 2 3 1","zo4 4 7"]

   vector<string> reorderLogFiles(vector<string>& logs) {
        vector<string> digitLogs, letterLogs;
        for (string &s : logs) {
            int i = 0;
            i = s.find(' '); // OR: while (s[i] != ' ') ++i;
            if (isalpha(s[i + 1])) 
                letterLogs.push_back(s.substr(i + 1) + " " + s.substr(0, i)); // NICE TRICK
            else 
                digitLogs.push_back(s);
        }
        sort(letterLogs.begin(), letterLogs.end()); // NICE THRICK!
        for (string &s : letterLogs) {
            int i = s.size() - 1;
            while (s[i] != ' ') 
                --i;
            s = s.substr(i + 1) + " " + s.substr(0, i);
        }
         letterLogs.insert(letterLogs.end(), digitLogs.begin() ,  digitLogs.end());
        // OR: for (string &s : digitLogs) letterLogs.push_back(s);
        return letterLogs;
    }
    
