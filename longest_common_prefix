// longest_common_prefix.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include "pch.h"
#include <iostream>
#include <string>
#include <vector>


using namespace std;

class Solution
{
public:
	string longestCommonPrefix(vector<string> strs)
	{
		string output;
		if (strs.size() == 0)
			return "";
		else if (strs.size() == 1)
			return strs[0];
		else if (strs.size() > 1)
		{
			int maxLengh = INT_MAX;
			for (int i = 0; i < strs.size(); i++)
				maxLengh = (maxLengh > strs[i].size()) ? strs[i].size() : maxLengh;
			for (int j = 0; j < maxLengh; j++)
			{
				char temp = strs[0][j];
				int i = 1;
				while (i < strs.size())
				{
					if (temp != strs[i][j])
						break;
					i++;
				}
				if (i == strs.size())
					output += temp;
				else
					break;
			}

		}
		return output;
	}
};

int main()
{
	Solution sol;
	vector<string> inp = { "aca","cba" };
	cout<< sol.longestCommonPrefix(inp);

}




///////////// RECURSIVE  95% speed and 5% space
class Solution {
public:
    string combine(string left, string right)
    {
        int size = max (left.length() , right.length());
        string out;
        for (int i = 0; i < size; i++)
        {
            if(left[i] == right[i])
                out += left[i];
            else 
                return out;
        }
        return out;
    }
    string Rec(vector<string>& strs,int begin, int end){
        if(begin == end)
            return strs[begin];
        string left = Rec(strs, begin, (begin + end) /2 );
        string right= Rec(strs, (begin + end) /2  + 1 , end);
        return combine(left, right);
    }
    string longestCommonPrefix(vector<string>& strs) {
        if(strs.size() == 0)
            return "";
        return Rec(strs,0,strs.size() - 1);
    }
};
//["flower","flow","flight"]
