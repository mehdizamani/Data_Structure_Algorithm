Given an array of integers A sorted in non-decreasing order, 
return an array of the squares of each number, also in sorted non-decreasing order.

 

Example 1:

Input: [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Example 2:

Input: [-7,-3,2,3,11]
Output: [4,9,9,49,121]


class Solution {
public:
    vector<int> sortedSquares(vector<int>& A) {
        // MY OPTIMAL APPROACH 
        for( int i = 0; i < A.size(); i++ )
            A[i]*=A[i];
        sort(A.begin(),A.end());
        return A;
        // MY ACADEMIC APPROACH!!!
        /*
        vector<int> out=A;
        deque<int> neg;
        vector<int> pos;
        int i=0;
        while(A[i]<=0)
        {
            neg.push_front(A[i]*A[i]);
            i++;
        }
        while(i<A.size())
        {
            pos.push_back(A[i]*A[i]);
            i++;
        }
        int negCntr=0;
        int posCntr=0;
        int mainCntr=0;
        while(mainCntr<A.size()&&posCntr<pos.size()&&negCntr<neg.size())
        {
            if(pos[posCntr] < neg[negCntr])
            {
                out[mainCntr]=pos[posCntr];
                posCntr++;
            }
            else    
            {
                out[mainCntr]=neg[negCntr];
                negCntr++;
            }
            mainCntr++;
        }
        if(posCntr<pos.size())
        {
            while(mainCntr<A.size())
            {
                out[mainCntr]=pos[posCntr];
                mainCntr++;
                posCntr++;
            }
        }
        if(negCntr<neg.size())
        {
               while(mainCntr<A.size())
            {
                out[mainCntr]=neg[negCntr];
                mainCntr++;
                negCntr++;
            }
        }
        return out;
        */
    }
};
