Given two strings s and t , write a function to determine if t is an anagram of s.

Example 1:

Input: s = "anagram", t = "nagaram"
Output: true
Example 2:

Input: s = "rat", t = "car"
Output: false
Note:
You may assume the string contains only lowercase alphabets.

Follow up:
What if the inputs contain unicode characters? How would you adapt your solution to such case?


class Solution {
public:
    bool isAnagram(string s, string t) {
        /* APPROACH 1: My Original way ( good for any time of input in s and t like $ % # )
        if(s.length() != t.length())
            return false;
        unordered_map<char, int> m;
        for (auto i: s)
            m[i] ++;
        for(auto i: t)
        {
            if(m.find(i) == m.end() || m.find(i)->second == 0)
                return false;
            else 
                m.find(i)->second --;
        }
        return true;
        */
        // APPROACH TWO : OPTIMAL TIME COMPLEXITY
        char a = 'a';
        vector<int> dif(26,0);
        for(auto i : s)
            dif[(int) i - (int) a] ++;
        
        for(auto i : t)
            dif[(int) i - (int) a] --;
        
        for(auto i : dif)
            if(i) return false;
        return true;
    }
};
