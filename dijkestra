
#include "pch.h"
#include <iostream>
#include <algorithm>
//#include <math>
#define V 9
//using namespcace std;
int minVertexAround(bool visited[],int dist[])
{
	int minn = INT_MAX, minInd = 0;
	for (int i = 0; i < V; i++)
		if (visited[i] == false && minn >= dist[i])
			minInd = i, minn = dist[i];
	return minInd;

}

void printSolution(int dist[], int n)
{
	printf("Vertex   Distance from Source\n");
	for (int i = 0; i < V; i++)
		printf("%d tt %d\n", i, dist[i]);
}
void dijkstra(int graph[V][V], int st)
{
	bool visited[V];
	int dist[V];
	for (int i = 0; i < V; i++)
		visited[i] = false, dist[i] = INT_MAX;
	dist[st] = 0;
	//visited[st] = true;
	int attempt=minVertexAround(visited,dist);
	for (int count = 0; count < V-1; count++)
	{

		int attempt = minVertexAround(visited, dist);
		visited[attempt] = true;
		for (int i = 0; i < V; i++)
		if (!visited[i] && graph[attempt][i] > 0 && dist[attempt] != INT_MAX
			&& dist[i] > dist[attempt] + graph[attempt][i])
			dist[i] = dist[attempt] + graph[attempt][i];
	}
	printSolution(dist, V);
}


int main()
{
	int graph[V][V] = { {0, 4, 0, 0, 0, 0, 0, 8, 0},
					 {4, 0, 8, 0, 0, 0, 0, 11, 0},
					 {0, 8, 0, 7, 0, 4, 0, 0, 2},
					 {0, 0, 7, 0, 9, 14, 0, 0, 0},
					 {0, 0, 0, 9, 0, 10, 0, 0, 0},
					 {0, 0, 4, 14, 10, 0, 2, 0, 0},
					 {0, 0, 0, 0, 0, 2, 0, 1, 6},
					 {8, 11, 0, 0, 0, 0, 1, 0, 7},
					 {0, 0, 2, 0, 0, 0, 6, 7, 0}
	};
	
	dijkstra(graph, 0);
    std::cout << "Hello World!\n"; 
