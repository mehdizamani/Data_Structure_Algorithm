

Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.


class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        // speed 94% and space 90%
        if (intervals.size() == 0)
            return {};
        vector<vector<int>> out;
        sort(intervals.begin(), intervals.end());
        int cntr = 0;
        while(cntr < intervals.size())
        {
            vector<int> temp(2,0);
            int rCntr = cntr + 1;
            int l = intervals[cntr][0];
            int r = intervals[cntr][1];
            while(rCntr < intervals.size() && r >= intervals[rCntr][0] )
            {
                r = max(r , intervals[rCntr][1]);
                rCntr++;
                cntr++;
            }
            temp[0] = l;
            temp[1] = r;
            out.emplace_back(temp);
            cntr++;
        }
        return out;
    }
};
