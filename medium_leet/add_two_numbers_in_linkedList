
You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order and each of their nodes contain a single digit.
Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

class Solution {
public:
    // 88% speed and 77% space 
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* out = new ListNode( (l1->val + l2->val) % 10 );
        ListNode* bck = out; 
        int rem = (l1->val + l2->val) / 10; 
        l1 = l1->next;
        l2 = l2->next;
        while(l1 && l2)
        {
            ListNode* temp = new  ListNode( (l1->val + l2->val + rem) % 10 );
            rem = (l1->val + l2->val + rem) / 10;
            bck -> next = temp;
            bck = bck -> next;
            l1 = l1->next;
            l2 = l2->next;
        }
        while(l1)
        {
            ListNode* temp = new  ListNode( (l1->val + rem) % 10 );
            rem = (l1->val + rem) / 10;
            bck -> next = temp;
            bck = bck -> next;
            l1 = l1->next;
        }
        
        while(l2)
        {
            ListNode* temp = new  ListNode( (l2->val + rem) % 10 );
            rem = (l2->val + rem) / 10;
            bck -> next = temp;
            bck = bck -> next;
            l2 = l2->next;
        }
        if (rem > 0)
        {
            ListNode* temp = new  ListNode(rem );
            bck -> next = temp; 
        }
        return out;
    }
    
};
