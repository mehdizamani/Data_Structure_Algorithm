Given an array nums of n integers where n > 1,  return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Example:

Input:  [1,2,3,4]
Output: [24,12,8,6]
Note: Please solve it without division and in O(n).

Follow up:
Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)



class Solution {
public:
    // speed 82, space 75
    vector<int> productExceptSelf(vector<int>& nums) {
        vector<int> out(nums.size(), 1);
        for(int i = 0 ; i < nums.size() - 1 ; i++)
              out[i + 1] = nums[i] * out[i] ;
        int tem = 1;
        for(int i = nums.size() - 1 ; i >= 0 ; i--)
        {
            out[i] = out[i] * tem;
            tem *= nums[i];
        }
        return out;   
    }
    
    
    /*
    // speed 10% and space 25%
    vector<int> productExceptSelf(vector<int>& nums) {
        vector<int> l(nums.size() , 1);
       // vector<int> r(nums.size() , 1);
        vector<int> out(nums.size() , 1);
        for(int i = 0 ; i < nums.size() - 1; i++)
        {
            l[i+1] = l[i] * nums[i];
            l[nums.size() - 1 - i - 1] = r[nums.size() - 1 - i] *nums[nums.size() - 1 - i];
        }
        for(int i = 0 ; i < nums.size(); i++)
            out[i] = l[i] * r[i];
        return out;
    }
    */
};
