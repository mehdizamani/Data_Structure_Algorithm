We have a list of points on the plane.  Find the K closest points to the origin (0, 0).

(Here, the distance between two points on a plane is the Euclidean distance.)

You may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.)

 

Example 1:

Input: points = [[1,3],[-2,2]], K = 1
Output: [[-2,2]]
Explanation: 
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].
Example 2:

Input: points = [[3,3],[5,-1],[-2,4]], K = 2
Output: [[3,3],[-2,4]]
(The answer [[-2,4],[3,3]] would also be accepted.)




class Solution {
public:
    
    // optimal approach, o(N) 85% speed and 60% space
    // the idea is that we dont need to find k sorted smallest answer. we only need the k smallest one
    // Say we choose some random element x = A[i] and split the array into two buckets:
    //one bucket of all the elements less than x, and another bucket of all the elements 
    //greater than or equal to x. This is known as "quickselecting by a pivot x".

    //The idea is that if we quickselect by some pivot, on average in linear time we'll
    //reduce the problem to a problem of half the size.
    vector<vector<int>> points;
    vector<vector<int>> kClosest(vector<vector<int>>& pointss, int K) {
        if (K >= pointss.size())
            return pointss;
        this->points = pointss;
        separateKpoint(0, points.size() - 1, K);
        return vector<vector<int>>(points.begin() , points.begin() + K);  // imp!!!!
    }
    
    int generateRand(int i, int j)
    {
        std::random_device dev;
        std::mt19937 rng(dev());
        std::uniform_int_distribution<std::mt19937::result_type> dist(i,j);//distribution in range of i,j
        return dist(rng);
    }

    void separateKpoint(int i ,int j, int K)
    {
        if (i >= j)
            return;
        int k = generateRand(i, j);
        swap(i , k); // why!!!
        
        int mid = partition(i, j);
        
        // trickyy part!!!!
        int leftLength =  mid - i + 1;      
        if(K < leftLength )
            separateKpoint(i, mid - 1 , K );
        else
            separateKpoint(mid + 1, j , K - leftLength);
    }
    
    
    int partition(int a, int b)
    {
        int io = a;
        int pivot = dist(a);
        a++;
     
        while(true)
        {
            while((a <= b) && dist(a) < pivot) a++;
            while((a <= b) && dist(b) >= pivot) b--;
            if(a >= b)
                break;
            swap(a,b);
        }
        swap(io, b);
        return b;
    }
    int dist(int i)
    {
        return points[i][0] * points[i][0] + points[i][1] * points[i][1];
    }
    void swap(int i , int j)
    {
        int x1 = points[i][0];
        int y1 = points[i][1];
        points[i][0] = points[j][0];
        points[i][1] = points[j][1];
        points[j][0] = x1;
        points[j][1] = y1;
    }
    
    
    /////////////////////////////////////////////
    
    
    /*
        // using sort O(nlogn)  55% speed and 35% space
        
    vector<vector<int>> kClosest(vector<vector<int>>& points, int K) {
        if (K >= points.size())
            return points;
        vector<tuple<int, int, int>> sorted;
        for (auto i : points)
            sorted.emplace_back(make_tuple(i[0] * i[0] + i[1] * i[1] , i[0] ,i[1]));
        sort(sorted.begin(), sorted.end());
        vector<vector<int>> out;
        out.reserve(K);
        for(int i = 0 ; i < K ; i++)
        {
            vector<int> temp(2,0);
            temp[0] = get<1>(sorted[i]);
            temp[1] = get<2>(sorted[i]);
            out.emplace_back(temp);
        }
        return out;
    }
        */
        ////////////////////////////////////////
        
        // using min heap!! O(nlogn)  44% speed and 30% space
        /*
        
    vector<vector<int>> kClosest(vector<vector<int>>& points, int K) {
        if (K >= points.size())
            return points;
        priority_queue<tuple<int, int, int> ,  vector<tuple<int, int, int>>, greater<tuple<int, int, int>> > pq; // to create a min heap!
        
        vector<vector<int>> out;
        for (auto i : points)
            pq.push(make_tuple(i[0] * i[0] + i[1] * i[1] , i[0] ,i[1]));
        for (int i = 0 ; i < K ; i++)
        {
            vector<int> temp(2,0);
            temp[0] = get<1>(pq.top());
            temp[1] = get<2>(pq.top());
            out.emplace_back(temp);
            pq.pop();
        }
        return out;
    }*/
    
    
};
