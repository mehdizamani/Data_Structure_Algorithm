Create a timebased key-value store class TimeMap, that supports two operations.

1. set(string key, string value, int timestamp)

Stores the key and value, along with the given timestamp.
2. get(string key, int timestamp)

Returns a value such that set(key, value, timestamp_prev) was called previously, with timestamp_prev <= timestamp.
If there are multiple such values, it returns the one with the largest timestamp_prev.
If there are no values, it returns the empty string ("").
 

Example 1:

Input: inputs = ["TimeMap","set","get","get","set","get","get"], inputs = [[],["foo","bar",1],["foo",1],["foo",3],["foo","bar2",4],["foo",4],["foo",5]]
Output: [null,null,"bar","bar",null,"bar2","bar2"]
Explanation:   
TimeMap kv;   
kv.set("foo", "bar", 1); // store the key "foo" and value "bar" along with timestamp = 1   
kv.get("foo", 1);  // output "bar"   
kv.get("foo", 3); // output "bar" since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 ie "bar"   
kv.set("foo", "bar2", 4);   
kv.get("foo", 4); // output "bar2"   
kv.get("foo", 5); //output "bar2"   

Example 2:

Input: inputs = ["TimeMap","set","set","get","get","get","get","get"], inputs = [[],["love","high",10],["love","low",20],["love",5],["love",10],["love",15],["love",20],["love",25]]
Output: [null,null,null,"","high","high","low","low"]








// LEETCODE using hashtable and vector  100% and 100%

class TimeMap {
    public:
    unordered_map<string, vector<pair<int, string>>> m;
    void set(string key, string value, int timestamp) {
      m[key].push_back({ timestamp, value });
    }
    string get(string key, int timestamp) {
      auto it = upper_bound(begin(m[key]), end(m[key]), pair<int, string>(timestamp, ""), [](
        const pair<int, string>& a, const pair<int, string>& b) { return a.first < b.first; });
      return it == m[key].begin() ? "" : prev(it)->second;
    }
};

/*
// LEETCODE using hashtable and map  40% and 100%
class TimeMap {
public:
    unordered_map<string, map<int, string>> m;
    void set(string key, string value, int timestamp) {
      m[key].insert({ timestamp, value });
    }
    string get(string key, int timestamp) {
      auto it = m[key].upper_bound(timestamp);
      return it == m[key].begin() ? "" : prev(it)->second;
    }
};
*/



/*

// MY CODE NOT WORKING!!!!
class TimeMap {
public:
    unordered_map<string, vector<pair<int, string>>> m;
    TimeMap() {
        
    }
    
    void set(string key, string value, int timestamp) {
        vector<pair<int, string>> tmp{make_pair(timestamp, value)};
        if(m.find(key) == m.end())
            m[key] = tmp;
        else
        {
            auto  tmp2 = m.find(key)->second;
            
            if(timestamp >= tmp2[tmp2.size() - 1].first)
                tmp2.emplace_back(make_pair(timestamp, value));
            else if(timestamp <= tmp2[0].first)
            {
                tmp2.emplace_back(tmp2[0]);
                tmp2[0] = make_pair(timestamp, value);
            }
            else 
            {
                int l = 0 , r = tmp2.size() - 1, m = 0 ;
                while(l < r)
                {
                    m = (l + r) / 2;
                    if(tmp2[m].first == timestamp)
                        break;
                    else if (tmp2[m].first < timestamp)
                        l = m + 1;
                    else 
                        r = m;
                }
                tmp2.insert(tmp2.begin() +  m - 1 , make_pair(timestamp, value));
            }
            
            m[key] = tmp2;
        }
    }
    
    string get(string key, int timestamp) {
        if(m.find(key) == m.end() || m.empty())
            return "";
        vector<pair<int, string>>  tmp = m.find(key)->second;
      //  sort(tmp.begin(), tmp.end());  // not a good idea cuase takes time
        if(timestamp < tmp[0].first)
            return "";
        int l = 0 , r = tmp.size() - 1, m = 0 ;
        while(l < r)
        {
            m = (l + r) / 2;
            if (tmp[m].first < timestamp )
            {
                l = m + 1;
            }
            else
            {
                break;
            }
        }
        return tmp[l].second;
    }
};
*/
/**
 * Your TimeMap object will be instantiated and called as such:
 * TimeMap* obj = new TimeMap();
 * obj->set(key,value,timestamp);
 * string param_2 = obj->get(key,timestamp);
 */
