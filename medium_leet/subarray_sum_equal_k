
Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:
Input:nums = [1,1,1], k = 2
Output: 2
Note:
The length of the array is in range [1, 20,000].
The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].




class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        
        // using hashmap O(N)!!! , speed 90% and space 70%
        unordered_map<int, int> m;
        m[0] = 1;
        int sum = 0;
        int out = 0;
        for (auto i : nums)
        {
            sum += i;
            if(m.find(sum - k) != m.end())
                out += m[sum - k];
            m[sum] ++;
        }
        
        return out;
        
        
        // if we sum up some of the numbers, the order become O(N^2) 
        // speed 5% and space 95%
        /*
        int out = 0;
        int cntr = nums.size();
        vector<int> sum(nums.size() + 1 , 0);
        sum[0] = 0;
        for(int i = 1 ; i <= nums.size() ; i++)
           // sum[i] = accumulate(nums.begin(), nums.begin() + i  , 0);// not a good approach here!! 
            sum[i] = sum[i - 1] + nums[i - 1];
        while (cntr > 0)
        {
            for (int i = 0; i <  nums.size() - (cntr - 1); i++)
            {
                if(sum[i + cntr] - sum[i] == k)
                    out++;
            }
            
            cntr--;
        }
        return out;
        */
        
        // brute force approach TIME EXCEEDED O(N^3)
        /*
        int out = 0;
        int cntr = nums.size();
        while (cntr > 0)
        {
            for (int i = 0; i <  nums.size() - (cntr - 1); i++)
            {
                if(accumulate(nums.begin() + i, nums.begin() + i + cntr , 0) == k)
                    out++;
            }
            
            cntr--;
        }
        return out;
        */
    }
};
