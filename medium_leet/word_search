
Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

Example:

board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

Given word = "ABCCED", return true.
Given word = "SEE", return true.
Given word = "ABCB", return false.


////////
// MY approach which was based on map, seems not a good idea, it fails in finding the visited path, (third example)
class Solution {
public:
    void populate(unordered_map<char, list<pair<int,int>>> & let_pos,
                  const vector<vector<char>>& board)
    {
        int i = 0 , j = 0;
        for(auto ro: board)
        {
            j = 0;
            for(auto cel: ro)
            {
                list<pair<int, int>> temp_pos_list;
                temp_pos_list.push_back(make_pair(i,j));
                if(let_pos.find(cel) == let_pos.end())
                    let_pos[cel] = temp_pos_list;
                else
                {
                    auto l0 = let_pos[cel];
                    l0.push_back(make_pair(i,j));
                    let_pos[cel] = l0;
                }
                j++;
            }
            i++;
        }
    }
    bool dfs(int k, int prev_i, int prev_j, int pos_i, int pos_j, unordered_map<char, list<pair<int,int>>>& let_pos, 
            const string& word,const vector<vector<char>>& board)
    {
        if (k == word.length() - 1 )
            return true;
        if (board[pos_i][pos_j] != word[k])//(let_pos.find(word[k]) == let_pos.end() )
            return false;
        else
        {
            auto l0 = (let_pos.find(word[k])->second);
            while(!l0.empty())
            {
                auto tmp = l0.back();
                int i = tmp.first, j =tmp.second;
                int row_size = board.size();
                int col_size = board[0].size();
                if ( (i + 1 < row_size && i + 1 != prev_i && dfs(k + 1, i, j, i + 1, j, let_pos, word, board)) ||
                     (i - 1 >= 0       && i - 1 != prev_i && dfs(k + 1, i, j, i - 1, j, let_pos, word, board)) ||
                     (j + 1 < col_size && j + 1 != prev_j && dfs(k + 1, i, j, i, j + 1, let_pos, word, board)) ||
                     (j - 1 >= 0       && j - 1 != prev_j && dfs(k + 1, i, j, i, j - 1, let_pos, word, board)) )
                    return true;
                 l0.pop_back();
            }
        }
        return false;
    }
    bool exist(vector<vector<char>>& board, string word) {
        
        unordered_map<char, list<pair<int,int>>> letter_pos;
        populate(letter_pos,board);
        bool output = false;
        if(letter_pos.find(word[0]) == letter_pos.end())
            return false;
        else
        {
            if(word.size() == 1 && letter_pos.find(word[0]) != letter_pos.end())
                return true;
            if(word.size() > board.size() * board[0].size())
                return false;
            else
            output = dfs(0, -1, -1, (letter_pos.find(word[0])->second).front().first ,
                         (letter_pos.find(word[0])->second).front().second  , 
                         letter_pos , word , board);
        
        }
        return output;
    }
};




//////////////////
//////
// 20% speed and 35% space
class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        if(board.size()==0)  return false;
        int m=board.size(), n=board[0].size();
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(help(board, i, j, 0, word))  return true;
            }
        }
        return false;
    }
    
    bool help(vector<vector<char>>& board, int i, int j, int len, string word){
        if(len==word.size())   return true;
        if(i<0 || j<0 || i>=board.size() || j>=board[0].size())  return false;
        if(board[i][j]!=word[len] || board[i][j]=='*')  return false;
        char ch=board[i][j];
        board[i][j]='*';
        bool result= help(board, i+1, j, len+1, word) ||
                     help(board, i-1, j, len+1, word) ||
                     help(board, i, j+1, len+1, word) ||
                     help(board, i, j-1, len+1, word);
        board[i][j]=ch;
        return result;
    }
};


 ///////////
// 100% 90%
class Solution {
public:
    bool exist(std::vector<std::vector<char> > &board, std::string word) {
        rows = static_cast<int>(board.size()), cols = static_cast<int>(board[0].size());
        for (int row = 0; row != rows; ++row)
            for (int col = 0; col != cols; ++col)
                if (exist(board, word, row, col, 0))
                    return true;
        return false;
    }
private:
    int rows, cols;
    bool exist(std::vector<std::vector<char> > &board, std::string &word, int row, int col, int pos) {
        if (board[row][col] != word[pos] || board[row][col] == ' ')
            return false;
        else if (pos == word.size() - 1)
            return true;
        char c = board[row][col];
        board[row][col] = ' ';
        bool next_exist = row > 0 && exist(board, word, row - 1, col, pos + 1) ||
            row < rows - 1 && exist(board, word, row + 1, col, pos + 1) ||
            col > 0 && exist(board, word, row, col - 1, pos + 1) ||
            col < cols - 1 && exist(board, word, row, col + 1, pos + 1);
        board[row][col] = c;
        return next_exist;
    }
};
