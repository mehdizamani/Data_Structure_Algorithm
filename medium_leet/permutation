Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]


class Solution {
public:
    ////////////////////
    // 66% 50%
    
     vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> perms;
        permute(nums, 0, perms);
        return perms;
    }
private:
    void permute(vector<int> nums, int i, vector<vector<int>>& perms) {
        if (i == nums.size()) {
            perms.push_back(nums);
        } else {
            for (int j = i; j < nums.size(); j++) {
                swap(nums[i], nums[j]);
                permute(nums, i + 1, perms);
            }
        }
    }
    
    
    
    
   ////////////////////////  using next_permutation
     100% 100%
    vector<vector<int>> permute(vector<int>& nums) {
        vector<int> orig = nums;
        vector<vector<int> > result;
        do{
            result.push_back(nums);
            next_permutation(nums.begin(),nums.end());
        }while(orig!=nums);
        
        return result;
    }*/
    
    
    // 66% 46%
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> result;
        vector<int> cur;
        permute(nums, result, cur, -1);
        return result;
    }
private:
    void permute(vector<int> nums, vector<vector<int>>& result, vector<int>& cur, int pre_index) {
        if(pre_index != -1)
            nums.erase(nums.begin()+pre_index);
        if(nums.empty()){
            result.push_back(cur);
            return;
        }
        for(int i = 0; i < nums.size(); i++){
            cur.push_back(nums[i]);
            permute(nums, result, cur, i);
            cur.pop_back();
        }
    }
};
