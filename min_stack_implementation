Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
 

Example:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.


class MinStack {
public:    
    stack<int> mStack;
    stack<int> mMinStack;
    MinStack() {
        
    }
    
    void push(int x) {
        mStack.push(x);
        if(mMinStack.empty() || mMinStack.top() >= x)
            mMinStack.push(x);
    }
    
    void pop() {
        if(mMinStack.top() == top())
            mMinStack.pop();
        mStack.pop();
    }
    
    int top() {
        return mStack.top();
    }
    
    int getMin() {
        return mMinStack.top();
    }
};

//////////////////////////////////

*/
// TAKES  92 msecond
/*class MinStack {
public:
    stack<int> s;
    priority_queue<int, vector<int> , greater<int>> pq;
  
    MinStack() {
        
    }
    
    void push(int x) {
        s.push(x);
        pq.push(x);
    }
    
    void pop() 
    {
        priority_queue<int, vector<int> , greater<int>> pq2;
        int it = s.top();
        while(pq.top() != it)
        {
            pq2.push(pq.top());
            pq.pop();
        }
        pq.pop();
        while(!pq2.empty())
        {
            pq.push(pq2.top());
            pq2.pop();
        }
        s.pop();
    }
    
    int top() {
        return s.top();
    }
    
    int getMin() {
        return pq.top();
    }
};
*/

////////////////////////////////////
// TAKES 200 msecond
/*
class MinStack {
public:
    vector<int> v;
    MinStack() {
        
    }
    
    void push(int x) {
        v.push_back(x);
   }
    
    void pop() 
    {
        v.erase(v.begin() + v.size() - 1);  // tricky on -1 !!
    }
    
    int top() {
        return v[v.size() - 1];
    }
    
    int getMin() {
        return *min_element(v.begin(), v.end());   // tricky and time consuming!!!!
    }
};

*/
/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(x);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
