Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.

Example:

Input: The root of a Binary Search Tree like this:
              5
            /   \
           2     13

Output: The root of a Greater Tree like this:
             18
            /   \
          20     13
          
          


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

//     2
//  0     4  
//-4   1  3  5


//    2
//  0    3
//-4  1

/*
class Solution {
public: // thricky !!! 100% 100%
    int sum = 0;
    TreeNode*  dfs(TreeNode* root)
    {
        if(root)
        {
        dfs(root->right);
        sum += root->val;
        root->val = sum;
        dfs(root->left);
       }
        return root;
    }
    TreeNode* convertBST(TreeNode* root) {
        return dfs(root);
    }
};
*/

class Solution {
public: // using stack !!! 70% 130%
    stack<TreeNode*> s;
    int sum = 0;
    void  dfs(TreeNode* root)
    {
        if(root) // !! similar to the inordered dfs travers. but we put the nodes in stack to uss it late: reverse inordered travers
        {
            dfs(root->left);
            s.push(root);
            dfs(root->right);
       }
    }
    TreeNode* convertBST(TreeNode* root) {
        dfs(root);
        while(!s.empty())
        {
            sum += (s.top())->val;
            s.top()->val = sum;
            s.pop();
        }
        return root;
    }
};
