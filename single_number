Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,1]
Output: 1
Example 2:

Input: [4,1,2,1,2]
Output: 4


class Solution {
public:
    int singleNumber(vector<int>& nums) {
       
        
        // APPPROach 1
        // use xor: n^n = 0, 0^n = n
        
        int single = 0;
        for(auto i : nums) 
            single ^= i;
        return single;
        
        // APPPROach 2
        unordered_map<int , int> m;
        for(auto i: nums)
            m[i] ++;
        for(auto i:m)
        {
            if(i.second == 1)
                return i.first;
        }
        
        return 0;
        
        
        
        // APPROACH 3
        sort(nums.begin(),nums.end());
        for(int i=1; i < nums.size(); i++)
        {
            if ( (i%2 == 1) && (nums[i] != nums[i-1]) )
                return nums[i-1];
        }
        return nums[nums.size()-1];
        
        // APPROACH 4 the worst
        for(auto i: nums)
            se.insert(i);
        int setsum = accumulate(se.begin(), se.end(), 0);
        int vecsum = accumulate(nums.begin(), nums.end(), 0);
        return (2*setsum - vecsum);
        
    }
};
